// Â© 2018 Joseph Cameron - All Rights Reserved
// Project: GDK
// Created on 17-07-03.
#include "gdk/defaultresources.h"

#include <vector>
#include <memory>

using namespace gdk;
using namespace DefaultResources;

namespace
{
    std::shared_ptr<Texture> checkeredTextureOfDeath;
    
    std::shared_ptr<ShaderProgram> pinkShaderOfDeath;
    std::shared_ptr<ShaderProgram> alphaCutOff;
    
    std::shared_ptr<VertexData> quad;
    std::shared_ptr<VertexData> cube;
    std::shared_ptr<VertexData> cylinder;
}

default_ptr<Texture> DefaultResources::getCheckeredTextureOfDeath()
{
    if (!checkeredTextureOfDeath)
    {
        std::vector<const GLubyte> textureData(
        {
            0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
            0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08,
            0x08, 0x02, 0x00, 0x00, 0x00, 0x4b, 0x6d, 0x29, 0xdc, 0x00, 0x00, 0x00,
            0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xae, 0xce, 0x1c, 0xe9, 0x00, 0x00,
            0x00, 0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x00, 0xb1, 0x8f, 0x0b, 0xfc,
            0x61, 0x05, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00,
            0x0e, 0xc3, 0x00, 0x00, 0x0e, 0xc3, 0x01, 0xc7, 0x6f, 0xa8, 0x64, 0x00,
            0x00, 0x00, 0x1b, 0x49, 0x44, 0x41, 0x54, 0x18, 0x57, 0x63, 0xf8, 0xff,
            0xff, 0xff, 0xcc, 0x9b, 0xaf, 0x30, 0x49, 0x06, 0xac, 0xa2, 0x40, 0x72,
            0x30, 0xea, 0xf8, 0xff, 0x1f, 0x00, 0xd3, 0x06, 0xab, 0x21, 0x92, 0xd9,
            0xa4, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42,
            0x60, 0x82
        });
        
        ::checkeredTextureOfDeath = std::make_shared<Texture>(Texture("CheckeredTextureOfDeath",textureData));
    }
    
    return default_ptr<Texture>(::checkeredTextureOfDeath);
}

default_ptr<ShaderProgram> DefaultResources::getPinkShaderOfDeath()
{
    if (!pinkShaderOfDeath)
    {
        const std::string vertexShaderSource = R"V0G0N(
    
        #version 150
        //Uniforms
        uniform mat4 _MVP;
    
        //VertIn
        in vec3 a_Position;
    
        void main ()
        {
            gl_Position = _MVP * vec4(a_Position,1.0);
        }

        )V0G0N";
    
        const std::string fragmentShaderSource = R"V0G0N(
    
        #version 150
        //FragOut
        out vec4 out_Frag;
    
        void main()
        {
            out_Frag = vec4(1,0.2,0.8,1);
        }
    
        )V0G0N";
    
        ::pinkShaderOfDeath = std::make_shared<ShaderProgram>(ShaderProgram("PinkShaderOfDeath",vertexShaderSource,fragmentShaderSource));
    }

    return default_ptr<ShaderProgram>(::pinkShaderOfDeath);
}

default_ptr<ShaderProgram> DefaultResources::getAlphaCutOff()
{
    if (!alphaCutOff)
    {
        const std::string vertexShaderSource = R"V0G0N(
        #version 150
        //Uniforms
        uniform mat4  _MVP;
        uniform mat4  _Model;
        uniform mat4  _View;
        uniform mat4  _Projection;
        uniform float _Time;
        //VertIn
        in vec3 a_Position;
        in vec2 a_UV;
        //VertOut
        out vec2 v_UV;
    
        void main ()
        {
            v_UV = a_UV;
            //gl_Position = _MVP * vec4(a_Position,1.0);
            gl_Position = _Projection * _View * _Model * vec4(a_Position,1.0);
        }

        )V0G0N";
    
        const std::string fragmentShaderSource = R"V0G0N(
        #version 150
        //Uniforms
        uniform sampler2D _Texture;
        //FragIn
        in vec2 v_UV;
        //FragOut
        out vec4 out_Frag;
    
        void main()
        {
            vec4 frag = texture(_Texture, v_UV);
            
            if (frag[3] < 1.0)
                discard;
            
            out_Frag = frag;
        }

        )V0G0N";
        
        ::alphaCutOff = std::make_shared<ShaderProgram>(ShaderProgram("AlphaCutOff",vertexShaderSource,fragmentShaderSource));
    }
    
    return default_ptr<ShaderProgram>(::alphaCutOff);
}

default_ptr<VertexData> DefaultResources::getQuad()
{
    if (!quad)
    {
        float size  = 1.;
        float hsize = size/2.;
        std::vector<GLfloat> data(
        {
            //        x,           y,    z,    u,    v,
            size -hsize, size -hsize, 0.0f, 1.0f, 0.0f, // 1--0
            0.0f -hsize, size -hsize, 0.0f, 0.0f, 0.0f, // | /
            0.0f -hsize, 0.0f -hsize, 0.0f, 0.0f, 1.0f, // 2
            size -hsize, size -hsize, 0.0f, 1.0f, 0.0f, //    0
            0.0f -hsize, 0.0f -hsize, 0.0f, 0.0f, 1.0f, //  / |
            size -hsize, 0.0f -hsize, 0.0f, 1.0f, 1.0f, // 1--2
        
        });
        
        ::quad = std::make_shared<VertexData>(VertexData("Quad",VertexData::Type::Static,VertexFormat::Pos3uv2,data));
    }
    
    return default_ptr<VertexData>(::quad);
}

default_ptr<VertexData> DefaultResources::getCube()
{
    if (!cube)
    {
        float size  = 1.;
        float hsize = size/2.;
        std::vector<GLfloat> data(
        {
            //        x,           y,      z,   u,   v,  Nx,  Ny,   Nz, North
            size -hsize, size -hsize, -hsize, 0.0, 0.0,  0.0, 0.0, -1.0, // 2--0
            0.0f -hsize, 0.0f -hsize, -hsize, 1.0, 1.0,  0.0, 0.0, -1.0, // | /
            0.0f -hsize, size -hsize, -hsize, 1.0, 0.0,  0.0, 0.0, -1.0, // 1
            size -hsize, size -hsize, -hsize, 0.0, 0.0,  0.0, 0.0, -1.0, //    0
            size -hsize, 0.0f -hsize, -hsize, 0.0, 1.0,  0.0, 0.0, -1.0, //  / |
            0.0f -hsize, 0.0f -hsize, -hsize, 1.0, 1.0,  0.0, 0.0, -1.0, // 2--1 */
            //        x,           y,      z,   u,   v,   Nx,  Ny,   Nz, South
            size -hsize, size -hsize,  hsize, 1.0, 0.0,  0.0, 0.0, +1.0, // 1--0
            0.0f -hsize, size -hsize,  hsize, 0.0, 0.0,  0.0, 0.0, +1.0, // | /
            0.0f -hsize, 0.0f -hsize,  hsize, 0.0, 1.0,  0.0, 0.0, +1.0, // 2
            size -hsize, size -hsize,  hsize, 1.0, 0.0,  0.0, 0.0, +1.0, //    0
            0.0f -hsize, 0.0f -hsize,  hsize, 0.0, 1.0,  0.0, 0.0, +1.0, //  / |
            size -hsize, 0.0f -hsize,  hsize, 1.0, 1.0,  0.0, 0.0, +1.0, // 1--2 */
            //        x,           y       z,   u,   v,   Nx,  Ny,  Nz, West
            0.0f -hsize, size -hsize,  hsize, 1.0, 0.0, -1.0, 0.0, 0.0, // 2--0
            0.0f -hsize, size -hsize, -hsize, 0.0, 0.0, -1.0, 0.0, 0.0, // | /
            0.0f -hsize, 0.0f -hsize, -hsize, 0.0, 1.0, -1.0, 0.0, 0.0, // 1
            0.0f -hsize, size -hsize,  hsize, 1.0, 0.0, -1.0, 0.0, 0.0, //    0
            0.0f -hsize, 0.0f -hsize, -hsize, 0.0, 1.0, -1.0, 0.0, 0.0, //  / |
            0.0f -hsize, 0.0f -hsize,  hsize, 1.0, 1.0, -1.0, 0.0, 0.0, // 2--1 */
            //        x,           y,      z,   u,   v,   Nx,   Ny,  Nz, East
            size -hsize, size -hsize,  hsize, 0.0, 0.0, +1.0,  0.0, 0.0, // 2--0
            size -hsize, 0.0f -hsize, -hsize, 1.0, 1.0, +1.0,  0.0, 0.0, // | /
            size -hsize, size -hsize, -hsize, 1.0, 0.0, +1.0,  0.0, 0.0, // 1
            size -hsize, size -hsize,  hsize, 0.0, 0.0, +1.0,  0.0, 0.0, //    0
            size -hsize, 0.0f -hsize,  hsize, 0.0, 1.0, +1.0,  0.0, 0.0, //  / |
            size -hsize, 0.0f -hsize, -hsize, 1.0, 1.0, +1.0,  0.0, 0.0, // 2--1 */
            //        x,           y,      z,   u,   v,   Nx,  Ny,  Nz, Down
            size -hsize, 0.0f -hsize, -hsize, 1.0, 0.0,  0.0, -1.0, 0.0, // 2--0
            0.0f -hsize, 0.0f -hsize,  hsize, 0.0, 1.0,  0.0, -1.0, 0.0, // | /
            0.0f -hsize, 0.0f -hsize, -hsize, 0.0, 0.0,  0.0, -1.0, 0.0, // 1
            size -hsize, 0.0f -hsize, -hsize, 1.0, 0.0,  0.0, -1.0, 0.0, //    0
            size -hsize, 0.0f -hsize,  hsize, 1.0, 1.0,  0.0, -1.0, 0.0, //  / |
            0.0f -hsize, 0.0f -hsize,  hsize, 0.0, 1.0,  0.0, -1.0, 0.0, // 2--1 */
            //        x,           y,      z,   u,   v,   Nx,   Ny,  Nz, Up
            size -hsize, 1.0f -hsize, -hsize, 1.0, 0.0,  0.0, +1.0, 0.0, // 1--0
            0.0f -hsize, 1.0f -hsize, -hsize, 0.0, 0.0,  0.0, +1.0, 0.0, // | /
            0.0f -hsize, 1.0f -hsize,  hsize, 0.0, 1.0,  0.0, +1.0, 0.0, // 2
            size -hsize, 1.0f -hsize, -hsize, 1.0, 0.0,  0.0, +1.0, 0.0, //    0
            0.0f -hsize, 1.0f -hsize,  hsize, 0.0, 1.0,  0.0, +1.0, 0.0, //  / |
            size -hsize, 1.0f -hsize,  hsize, 1.0, 1.0,  0.0, +1.0, 0.0, // 1--2 */
            
        });
        
        ::cube = std::make_shared<VertexData>(VertexData("Cube",VertexData::Type::Static,VertexFormat::Pos3uv2Norm3,data));
    }
    
    return default_ptr<VertexData>(::cube);
}

default_ptr<VertexData> DefaultResources::getCylinder()
{
    if (!cylinder)
    {
        //float size  = 1.;
        //float hsize = size/2.;
        std::vector<GLfloat> data(
        {
            //X, Y, Z, U, V, Nx, Ny, Nz
            -0.4755286, -1, -0.1545086, 0.1005999, 0.0004537381, -0.9510568, 0, -0.309016,
            -0.4755286, 1, -0.1545086, 0.1005996, 0.9994308, -0.9510568, 0, -0.309016,
            -0.4045088, 1, -0.2938928, 0.2005053, 0.9994308, -0.809017, 0, -0.5877854,
            -0.4755286, -1, -0.1545086, 0.1005999, 0.0004537381, -0.9510568, 0, -0.309016,
            -0.4045088, 1, -0.2938928, 0.2005053, 0.9994308, -0.809017, 0, -0.5877854,
            -0.4045088, -1, -0.2938928, 0.2005054, 0.0004537381, -0.809017, 0, -0.5877854,
            -0.4045088, -1, -0.2938928, 0.2005054, 0.0004537381, -0.809017, 0, -0.5877854,
            -0.4045088, 1, -0.2938928, 0.2005053, 0.9994308, -0.809017, 0, -0.5877854,
            -0.2938928, 1, -0.4045087, 0.300411, 0.9994308, -0.5877851, 0, -0.8090171,
            -0.4045088, -1, -0.2938928, 0.2005054, 0.0004537381, -0.809017, 0, -0.5877854,
            -0.2938928, 1, -0.4045087, 0.300411, 0.9994308, -0.5877851, 0, -0.8090171,
            -0.2938928, -1, -0.4045087, 0.300411, 0.0004537381, -0.5877851, 0, -0.8090171,
            -0.2938928, -1, -0.4045087, 0.300411, 0.0004537381, -0.5877851, 0, -0.8090171,
            -0.2938928, 1, -0.4045087, 0.300411, 0.9994308, -0.5877851, 0, -0.8090171,
            -0.1545086, 1, -0.4755285, 0.4003165, 0.9994308, -0.3090168, 0, -0.9510565,
            -0.2938928, -1, -0.4045087, 0.300411, 0.0004537381, -0.5877851, 0, -0.8090171,
            -0.1545086, 1, -0.4755285, 0.4003165, 0.9994308, -0.3090168, 0, -0.9510565,
            -0.1545086, -1, -0.4755285, 0.4003165, 0.0004537381, -0.3090168, 0, -0.9510565,
            -0.1545086, -1, -0.4755285, 0.4003165, 0.0004537381, -0.3090168, 0, -0.9510565,
            -0.1545086, 1, -0.4755285, 0.4003165, 0.9994308, -0.3090168, 0, -0.9510565,
            0, 1, -0.5000002, 0.500222, 0.9994308, 0, 0, -1,
            -0.1545086, -1, -0.4755285, 0.4003165, 0.0004537381, -0.3090168, 0, -0.9510565,
            0, 1, -0.5000002, 0.500222, 0.9994308, 0, 0, -1,
            0, -1, -0.5000002, 0.500222, 0.0004537381, 0, 0, -1,
            0, -1, -0.5000002, 0.500222, 0.0004537381, 0, 0, -1,
            0, 1, -0.5000002, 0.500222, 0.9994308, 0, 0, -1,
            0.1545086, 1, -0.4755285, 0.6001273, 0.9994308, 0.3090171, 0, -0.9510565,
            0, -1, -0.5000002, 0.500222, 0.0004537381, 0, 0, -1,
            0.1545086, 1, -0.4755285, 0.6001273, 0.9994308, 0.3090171, 0, -0.9510565,
            0.1545086, -1, -0.4755285, 0.6001273, 0.0004537381, 0.3090171, 0, -0.9510565,
            0.1545086, -1, -0.4755285, 0.6001273, 0.0004537381, 0.3090171, 0, -0.9510565,
            0.1545086, 1, -0.4755285, 0.6001273, 0.9994308, 0.3090171, 0, -0.9510565,
            0.2938927, 1, -0.4045087, 0.7000328, 0.9994308, 0.5877854, 0, -0.8090168,
            0.1545086, -1, -0.4755285, 0.6001273, 0.0004537381, 0.3090171, 0, -0.9510565,
            0.2938927, 1, -0.4045087, 0.7000328, 0.9994308, 0.5877854, 0, -0.8090168,
            0.2938927, -1, -0.4045087, 0.7000327, 0.0004537381, 0.5877854, 0, -0.8090168,
            0.2938927, -1, -0.4045087, 0.7000327, 0.0004537381, 0.5877854, 0, -0.8090168,
            0.2938927, 1, -0.4045087, 0.7000328, 0.9994308, 0.5877854, 0, -0.8090168,
            0.4045086, 1, -0.2938927, 0.7999381, 0.9994308, 0.8090171, 0, -0.5877851,
            0.2938927, -1, -0.4045087, 0.7000327, 0.0004537381, 0.5877854, 0, -0.8090168,
            0.4045086, 1, -0.2938927, 0.7999381, 0.9994308, 0.8090171, 0, -0.5877851,
            0.4045086, -1, -0.2938927, 0.799938, 0.0004537381, 0.8090171, 0, -0.5877851,
            0.4045086, -1, -0.2938927, 0.799938, 0.0004537381, 0.8090171, 0, -0.5877851,
            0.4045086, 1, -0.2938927, 0.7999381, 0.9994308, 0.8090171, 0, -0.5877851,
            0.4755284, 1, -0.1545085, 0.8998435, 0.9994308, 0.9510565, 0, -0.3090169,
            0.4045086, -1, -0.2938927, 0.799938, 0.0004537381, 0.8090171, 0, -0.5877851,
            0.4755284, 1, -0.1545085, 0.8998435, 0.9994308, 0.9510565, 0, -0.3090169,
            0.4755284, -1, -0.1545085, 0.8998432, 0.0004537381, 0.9510565, 0, -0.3090169,
            0.4755284, -1, -0.1545085, 0.8998432, 0.0004537381, 0.9510565, 0, -0.3090169,
            0.4755284, 1, -0.1545085, 0.8998435, 0.9994308, 0.9510565, 0, -0.3090169,
            0.5000001, 1, 0, 0.9997491, 0.9994308, 1, 0, 0,
            0.4755284, -1, -0.1545085, 0.8998432, 0.0004537381, 0.9510565, 0, -0.3090169,
            0.5000001, 1, 0, 0.9997491, 0.9994308, 1, 0, 0,
            0.5000001, -1, 0, 0.999749, 0.0004537381, 1, 0, 0,
            0.5000001, -1, 0, 0.0006936856, 0.0004537381, 1, 0, 0,
            0.5000001, 1, 0, 0.0006940446, 0.9994308, 1, 0, 0,
            0.4755284, 1, 0.1545085, 0.1005996, 0.9994308, 0.9510565, 0, 0.309017,
            0.5000001, -1, 0, 0.0006936856, 0.0004537381, 1, 0, 0,
            0.4755284, 1, 0.1545085, 0.1005996, 0.9994308, 0.9510565, 0, 0.309017,
            0.4755284, -1, 0.1545085, 0.1005993, 0.0004537381, 0.9510565, 0, 0.309017,
            0.4755284, -1, 0.1545085, 0.1005993, 0.0004537381, 0.9510565, 0, 0.309017,
            0.4755284, 1, 0.1545085, 0.1005996, 0.9994308, 0.9510565, 0, 0.309017,
            0.4045086, 1, 0.2938927, 0.2005051, 0.9994308, 0.8090169, 0, 0.5877854,
            0.4755284, -1, 0.1545085, 0.1005993, 0.0004537381, 0.9510565, 0, 0.309017,
            0.4045086, 1, 0.2938927, 0.2005051, 0.9994308, 0.8090169, 0, 0.5877854,
            0.4045086, -1, 0.2938927, 0.200505, 0.0004537381, 0.8090169, 0, 0.5877854,
            0.4045086, -1, 0.2938927, 0.200505, 0.0004537381, 0.8090169, 0, 0.5877854,
            0.4045086, 1, 0.2938927, 0.2005051, 0.9994308, 0.8090169, 0, 0.5877854,
            0.2938927, 1, 0.4045086, 0.3004106, 0.9994308, 0.5877852, 0, 0.8090171,
            0.4045086, -1, 0.2938927, 0.200505, 0.0004537381, 0.8090169, 0, 0.5877854,
            0.2938927, 1, 0.4045086, 0.3004106, 0.9994308, 0.5877852, 0, 0.8090171,
            0.2938927, -1, 0.4045086, 0.3004106, 0.0004537381, 0.5877852, 0, 0.8090171,
            0.2938927, -1, 0.4045086, 0.3004106, 0.0004537381, 0.5877852, 0, 0.8090171,
            0.2938927, 1, 0.4045086, 0.3004106, 0.9994308, 0.5877852, 0, 0.8090171,
            0.1545085, 1, 0.4755283, 0.400316, 0.9994308, 0.3090169, 0, 0.9510565,
            0.2938927, -1, 0.4045086, 0.3004106, 0.0004537381, 0.5877852, 0, 0.8090171,
            0.1545085, 1, 0.4755283, 0.400316, 0.9994308, 0.3090169, 0, 0.9510565,
            0.1545085, -1, 0.4755283, 0.400316, 0.0004537381, 0.3090169, 0, 0.9510565,
            0.1545085, -1, 0.4755283, 0.400316, 0.0004537381, 0.3090169, 0, 0.9510565,
            0.1545085, 1, 0.4755283, 0.400316, 0.9994308, 0.3090169, 0, 0.9510565,
            1.490116E-08, 1, 0.5000001, 0.5002215, 0.9994308, 0, 0, 1,
            0.1545085, -1, 0.4755283, 0.400316, 0.0004537381, 0.3090169, 0, 0.9510565,
            1.490116E-08, 1, 0.5000001, 0.5002215, 0.9994308, 0, 0, 1,
            1.490116E-08, -1, 0.5000001, 0.5002215, 0.0004537381, 0, 0, 1,
            1.490116E-08, -1, 0.5000001, 0.5002215, 0.0004537381, 0, 0, 1,
            1.490116E-08, 1, 0.5000001, 0.5002215, 0.9994308, 0, 0, 1,
            -0.1545085, 1, 0.4755283, 0.6001268, 0.9994308, -0.3090171, 0, 0.9510565,
            1.490116E-08, -1, 0.5000001, 0.5002215, 0.0004537381, 0, 0, 1,
            -0.1545085, 1, 0.4755283, 0.6001268, 0.9994308, -0.3090171, 0, 0.9510565,
            -0.1545085, -1, 0.4755283, 0.6001268, 0.0004537381, -0.3090171, 0, 0.9510565,
            -0.1545085, -1, 0.4755283, 0.6001268, 0.0004537381, -0.3090171, 0, 0.9510565,
            -0.1545085, 1, 0.4755283, 0.6001268, 0.9994308, -0.3090171, 0, 0.9510565,
            -0.2938926, 1, 0.4045085, 0.7000321, 0.9994308, -0.5877852, 0, 0.809017,
            -0.1545085, -1, 0.4755283, 0.6001268, 0.0004537381, -0.3090171, 0, 0.9510565,
            -0.2938926, 1, 0.4045085, 0.7000321, 0.9994308, -0.5877852, 0, 0.809017,
            -0.2938926, -1, 0.4045085, 0.7000322, 0.0004537381, -0.5877852, 0, 0.809017,
            -0.2938926, -1, 0.4045085, 0.7000322, 0.0004537381, -0.5877852, 0, 0.809017,
            -0.2938926, 1, 0.4045085, 0.7000321, 0.9994308, -0.5877852, 0, 0.809017,
            -0.4045085, 1, 0.2938927, 0.7999371, 0.9994308, -0.809017, 0, 0.5877852,
            -0.2938926, -1, 0.4045085, 0.7000322, 0.0004537381, -0.5877852, 0, 0.809017,
            -0.4045085, 1, 0.2938927, 0.7999371, 0.9994308, -0.809017, 0, 0.5877852,
            -0.4045085, -1, 0.2938927, 0.7999375, 0.0004537381, -0.809017, 0, 0.5877852,
            -0.4045085, -1, 0.2938927, 0.7999375, 0.0004537381, -0.809017, 0, 0.5877852,
            -0.4045085, 1, 0.2938927, 0.7999371, 0.9994308, -0.809017, 0, 0.5877852,
            -0.4755283, 1, 0.1545085, 0.8998424, 0.9994308, -0.9510565, 0, 0.3090169,
            -0.4045085, -1, 0.2938927, 0.7999375, 0.0004537381, -0.809017, 0, 0.5877852,
            -0.4755283, 1, 0.1545085, 0.8998424, 0.9994308, -0.9510565, 0, 0.3090169,
            -0.4755283, -1, 0.1545085, 0.8998428, 0.0004537381, -0.9510565, 0, 0.3090169,
            -0.4755283, -1, 0.1545085, 0.8998428, 0.0004537381, -0.9510565, 0, 0.3090169,
            -0.4755283, 1, 0.1545085, 0.8998424, 0.9994308, -0.9510565, 0, 0.3090169,
            -0.5, 1, 0, 0.9997478, 0.9994308, -1, 0, 0,
            -0.4755283, -1, 0.1545085, 0.8998428, 0.0004537381, -0.9510565, 0, 0.3090169,
            -0.5, 1, 0, 0.9997478, 0.9994308, -1, 0, 0,
            -0.5, -1, 0, 0.9997481, 0.0004537381, -1, 0, 0,
            -0.5, -1, 0, 0.00069427, 0.0004537381, -1, 0, 0,
            -0.5, 1, 0, 0.0006939089, 0.9994308, -1, 0, 0,
            -0.4755286, 1, -0.1545086, 0.1005996, 0.9994308, -0.9510568, 0, -0.309016,
            -0.5, -1, 0, 0.00069427, 0.0004537381, -1, 0, 0,
            -0.4755286, 1, -0.1545086, 0.1005996, 0.9994308, -0.9510568, 0, -0.309016,
            -0.4755286, -1, -0.1545086, 0.1005999, 0.0004537381, -0.9510568, 0, -0.309016,
            -0.4045088, -1, -0.2938928, 0.0988569, 0.7915539, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            -0.4755286, -1, -0.1545086, 0.02838877, 0.6532523, 0, -1, 0,
            -0.2938928, -1, -0.4045087, 0.2086136, 0.9013107, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            -0.4045088, -1, -0.2938928, 0.0988569, 0.7915539, 0, -1, 0,
            -0.1545086, -1, -0.4755285, 0.3469154, 0.971779, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            -0.2938928, -1, -0.4045087, 0.2086136, 0.9013107, 0, -1, 0,
            0, -1, -0.5000002, 0.500224, 0.9960608, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            -0.1545086, -1, -0.4755285, 0.3469154, 0.971779, 0, -1, 0,
            0.1545086, -1, -0.4755285, 0.6535327, 0.971779, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            0, -1, -0.5000002, 0.500224, 0.9960608, 0, -1, 0,
            0.2938927, -1, -0.4045087, 0.7918344, 0.9013106, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            0.1545086, -1, -0.4755285, 0.6535327, 0.971779, 0, -1, 0,
            0.4045086, -1, -0.2938927, 0.901591, 0.7915536, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            0.2938927, -1, -0.4045087, 0.7918344, 0.9013106, 0, -1, 0,
            0.4755284, -1, -0.1545085, 0.9720588, 0.6532521, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            0.4045086, -1, -0.2938927, 0.901591, 0.7915536, 0, -1, 0,
            0.5000001, -1, 0, 0.9963405, 0.4999437, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            0.4755284, -1, -0.1545085, 0.9720588, 0.6532521, 0, -1, 0,
            0.4755284, -1, 0.1545085, 0.9720586, 0.3466355, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            0.5000001, -1, 0, 0.9963405, 0.4999437, 0, -1, 0,
            0.4045086, -1, 0.2938927, 0.9015904, 0.2083341, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            0.4755284, -1, 0.1545085, 0.9720586, 0.3466355, 0, -1, 0,
            0.2938927, -1, 0.4045086, 0.7918337, 0.09857755, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            0.4045086, -1, 0.2938927, 0.9015904, 0.2083341, 0, -1, 0,
            0.1545085, -1, 0.4755283, 0.653532, 0.02810944, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            0.2938927, -1, 0.4045086, 0.7918337, 0.09857755, 0, -1, 0,
            1.490116E-08, -1, 0.5000001, 0.5002234, 0.003827875, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            0.1545085, -1, 0.4755283, 0.653532, 0.02810944, 0, -1, 0,
            -0.1545085, -1, 0.4755283, 0.346915, 0.02810972, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            1.490116E-08, -1, 0.5000001, 0.5002234, 0.003827875, 0, -1, 0,
            -0.2938926, -1, 0.4045085, 0.2086136, 0.09857795, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            -0.1545085, -1, 0.4755283, 0.346915, 0.02810972, 0, -1, 0,
            -0.4045085, -1, 0.2938927, 0.09885708, 0.2083347, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            -0.2938926, -1, 0.4045085, 0.2086136, 0.09857795, 0, -1, 0,
            -0.4755283, -1, 0.1545085, 0.02838913, 0.3466361, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            -0.4045085, -1, 0.2938927, 0.09885708, 0.2083347, 0, -1, 0,
            -0.5, -1, 0, 0.004107505, 0.4999442, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            -0.4755283, -1, 0.1545085, 0.02838913, 0.3466361, 0, -1, 0,
            -0.4755286, -1, -0.1545086, 0.02838877, 0.6532523, 0, -1, 0,
            0, -1, 0, 0.5002239, 0.4999443, 0, -1, 0,
            -0.5, -1, 0, 0.004107505, 0.4999442, 0, -1, 0,
            -0.4755286, 1, -0.1545086, 0.9720596, 0.6532523, 0, 1, 0,
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0,
            -0.4045088, 1, -0.2938928, 0.9015915, 0.7915539, 0, 1, 0,
            -0.4045088, 1, -0.2938928, 0.9015915, 0.7915539, 0, 1, 0,
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0,
            -0.2938928, 1, -0.4045087, 0.7918347, 0.9013107, 0, 1, 0,
            -0.2938928, 1, -0.4045087, 0.7918347, 0.9013107, 0, 1, 0,
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0,
            -0.1545086, 1, -0.4755285, 0.653533, 0.971779, 0, 1, 0,
            -0.1545086, 1, -0.4755285, 0.653533, 0.971779, 0, 1, 0,
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0,
            0, 1, -0.5000002, 0.5002243, 0.9960608, 0, 1, 0,
            0, 1, -0.5000002, 0.5002243, 0.9960608, 0, 1, 0,
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0,
            0.1545086, 1, -0.4755285, 0.3469157, 0.971779, 0, 1, 0,
            0.1545086, 1, -0.4755285, 0.3469157, 0.971779, 0, 1, 0, 
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0, 
            0.2938927, 1, -0.4045087, 0.2086142, 0.9013106, 0, 1, 0, 
            0.2938927, 1, -0.4045087, 0.2086142, 0.9013106, 0, 1, 0, 
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0, 
            0.4045086, 1, -0.2938927, 0.0988576, 0.7915537, 0, 1, 0, 
            0.4045086, 1, -0.2938927, 0.0988576, 0.7915537, 0, 1, 0, 
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0, 
            0.4755284, 1, -0.1545085, 0.0283896, 0.6532522, 0, 1, 0, 
            0.4755284, 1, -0.1545085, 0.0283896, 0.6532522, 0, 1, 0, 
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0, 
            0.5000001, 1, 0, 0.004108027, 0.4999439, 0, 1, 0, 
            0.5000001, 1, 0, 0.004108027, 0.4999439, 0, 1, 0, 
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0, 
            0.4755284, 1, 0.1545085, 0.02838971, 0.3466356, 0, 1, 0, 
            0.4755284, 1, 0.1545085, 0.02838971, 0.3466356, 0, 1, 0, 
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0, 
            0.4045086, 1, 0.2938927, 0.09885782, 0.2083341, 0, 1, 0, 
            0.4045086, 1, 0.2938927, 0.09885782, 0.2083341, 0, 1, 0, 
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0, 
            0.2938927, 1, 0.4045086, 0.2086144, 0.09857755, 0, 1, 0, 
            0.2938927, 1, 0.4045086, 0.2086144, 0.09857755, 0, 1, 0, 
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0, 
            0.1545085, 1, 0.4755283, 0.3469159, 0.02810938, 0, 1, 0, 
            0.1545085, 1, 0.4755283, 0.3469159, 0.02810938, 0, 1, 0, 
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0, 
            1.490116E-08, 1, 0.5000001, 0.5002242, 0.003827723, 0, 1, 0, 
            1.490116E-08, 1, 0.5000001, 0.5002242, 0.003827723, 0, 1, 0, 
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0, 
            -0.1545085, 1, 0.4755283, 0.6535327, 0.02810941, 0, 1, 0, 
            -0.1545085, 1, 0.4755283, 0.6535327, 0.02810941, 0, 1, 0, 
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0, 
            -0.2938926, 1, 0.4045085, 0.7918344, 0.09857755, 0, 1, 0, 
            -0.2938926, 1, 0.4045085, 0.7918344, 0.09857755, 0, 1, 0, 
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0, 
            -0.4045085, 1, 0.2938927, 0.901591, 0.2083343, 0, 1, 0, 
            -0.4045085, 1, 0.2938927, 0.901591, 0.2083343, 0, 1, 0, 
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0, 
            -0.4755283, 1, 0.1545085, 0.9720591, 0.3466357, 0, 1, 0, 
            -0.4755283, 1, 0.1545085, 0.9720591, 0.3466357, 0, 1, 0, 
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0, 
            -0.5, 1, 0, 0.9963408, 0.4999439, 0, 1, 0, 
            -0.5, 1, 0, 0.9963408, 0.4999439, 0, 1, 0, 
            0, 1, 0, 0.5002245, 0.4999442, 0, 1, 0, 
            -0.4755286, 1, -0.1545086, 0.9720596, 0.6532523, 0, 1, 0, 
            
        });
        
        ::cylinder = std::make_shared<VertexData>(VertexData("Cylinder",VertexData::Type::Static,VertexFormat::Pos3uv2Norm3,data));
    }
    
    return default_ptr<VertexData>(::cylinder);
}
